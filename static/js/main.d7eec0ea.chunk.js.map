{"version":3,"sources":["components/title.tsx","components/stone.tsx","components/indicator.tsx","components/utils.ts","components/volume.tsx","components/board.tsx","index.tsx","components/useStepNumber.ts"],"names":["Title","React","memo","className","Stone","props","color","value","onClick","Indicator","status","left","right","winner","xIsNext","isDraw","calculateWinner","squares","index","row","Math","trunc","col","dirList","i","line","isOverRun","slice","Set","map","val","size","console","log","dir","array","element","audioPlay","path","volume","audio","Audio","play","then","catch","error","warn","Volume","newVolume","classAttribute","setVolume","BoardRow","Board","id","Game","useState","Array","fill","history","setHistory","isEnter","setIsEnter","setIsDraw","stepNumber","setStepNumber","setXIsNext","step","useStepNumber","incStepNumber","updateStepNumber","current","winStreak","newHistory","length","place","isPlaceable","includes","makeWinSquares","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7eec0ea.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = React.memo(function showTitle() {\n  return (\n    <div className=\"game-title\">\n      <span className=\"neon flash\">\n        電<span>電</span>\n      </span>\n      <span className=\"neon flash\">\n        脳<span>脳</span>\n      </span>\n      <span className=\"neon flash\">\n        盤<span>盤</span>\n      </span>\n      <span className=\"neon flash\">\n        上<span>上</span>\n      </span>\n      <span className=\"neon flash\">\n        娯<span>娯</span>\n      </span>\n      <span className=\"neon flash\">\n        楽<span>楽</span>\n      </span>\n      <span className=\"neon flash\">\n        &nbsp;<span>&nbsp;</span>\n      </span>\n      <span className=\"neon flash\">\n        四<span>四</span>\n      </span>\n      <span className=\"neon flash\">\n        子<span>子</span>\n      </span>\n      <span className=\"neon flash\">\n        棋<span>棋</span>\n      </span>\n    </div>\n  );\n});\n\nexport default Title;\n","import React from 'react';\n\ntype DataProps = {\n  value: string | null;\n  onClick: () => void;\n};\n\nconst Stone = (props: DataProps): JSX.Element => {\n  let color;\n  if (props.value === null) color = '';\n  else color = props.value === 'X' ? 'stone-color1' : 'stone-color2';\n  return <button className={'stone ' + color} onClick={props.onClick} />;\n};\n\nexport default Stone;\n","import React from 'react';\nimport Stone from './stone';\n\ntype DataProps = {\n  xIsNext: boolean;\n  isDraw: boolean;\n  winner: string | null;\n};\n\nconst Indicator = (props: DataProps): JSX.Element => {\n  let status;\n  let left: string | null = null;\n  let right: string | null = null;\n  if (props.winner) {\n    status = props.winner;\n  } else {\n    status = props.xIsNext ? 'X' : 'O';\n  }\n  if (!props.isDraw) {\n    if (status === 'X') {\n      left = status;\n    } else {\n      right = status;\n    }\n  }\n  return (\n    <div className=\"indicator\">\n      <Stone\n        value={left}\n        onClick={() => {\n          return;\n        }}></Stone>\n      <Stone\n        value={right}\n        onClick={() => {\n          return;\n        }}></Stone>\n    </div>\n  );\n};\n\nexport default Indicator;\n","//  return placeable index number, or return null if stone is full on col\nexport function isPlaceable(squares: Array<string>, col: number): number | null {\n  for (let row = 5; row >= 0; row--) {\n    const index = row * 7 + col;\n    if (squares[index] === null) {\n      return index;\n    }\n  }\n  return null;\n}\n\nexport function calculateWinner(squares: Array<string>, index: number): Array<number> | null {\n  const row = Math.trunc(index / 7);\n  const col = index % 7;\n  const dirList = [\n    [0, 1],\n    [-1, 1],\n    [-1, 0],\n    [-1, -1],\n    [0, -1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n\n  if (index === 42) return null;\n  if (squares[index] !== null) {\n    for (let i = 0; i < 8; i++) {\n      const line = [\n        (row + dirList[i][0] * 0) * 7 + (col + dirList[i][1] * 0),\n        (row + dirList[i][0] * 1) * 7 + (col + dirList[i][1] * 1),\n        (row + dirList[i][0] * 2) * 7 + (col + dirList[i][1] * 2),\n        (row + dirList[i][0] * 3) * 7 + (col + dirList[i][1] * 3),\n      ];\n      if (!isOverRun(i, line.slice(0, 3))) continue;\n      const set = new Set(\n        line.map((val) => {\n          return squares[val];\n        }),\n      );\n      if (set.size === 1) {\n        console.log(line);\n        return line;\n      }\n    }\n  }\n  return calculateWinner(squares, index + 1);\n}\n\nfunction isOverRun(dir: number, array: Array<number>) {\n  for (let i = 0; i < 3; i++) {\n    const element = array[i];\n    const row = Math.trunc(element / 7);\n    const col = element % 7;\n    if (\n      (col === 0 && dir >= 3 && dir <= 5) ||\n      (row === 0 && dir >= 1 && dir <= 3) ||\n      (col === 6 && (dir <= 1 || dir === 7)) ||\n      (row === 5 && dir >= 6 && dir <= 8)\n    )\n      return false;\n  }\n  return true;\n}\n\nexport function makeWinSquares(squares: Array<string | null>, winStreak: number[] | null): void {\n  const winner = winStreak ? squares[winStreak[0]] : null;\n  if (winStreak) {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i] = winStreak.includes(i) ? winner : null;\n    }\n  }\n}\n\nexport function audioPlay(path: string, volume: number): void {\n  const audio = new Audio(path);\n  audio.volume = volume;\n  audio\n    .play()\n    .then(() => {\n      console.log('Audio started!');\n    })\n    .catch((error) => console.warn(error));\n}\n","import React from 'react';\nimport '../index.css';\nimport { audioPlay } from './utils';\n\ntype VolumeProps = {\n  volume: number;\n  setVolume: React.Dispatch<React.SetStateAction<number>>;\n};\n\nconst Volume = React.memo(function showVolume(props: VolumeProps) {\n  let classAttribute = '';\n  let newVolume: number;\n  if (props.volume === 1) {\n    classAttribute = 'fas fa-volume-up fa-3x';\n    newVolume = 0.5;\n  } else if (props.volume === 0.5) {\n    classAttribute = 'fas fa-volume-down fa-3x';\n    newVolume = 0;\n  } else {\n    classAttribute = 'fas fa-volume-off fa-3x';\n    newVolume = 1;\n  }\n  return (\n    <div className=\"volume\">\n      <i\n        className={classAttribute}\n        onClick={() => {\n          audioPlay('audio/switch.mp3', newVolume);\n          props.setVolume(newVolume);\n        }}></i>\n    </div>\n  );\n});\n\nexport default Volume;\n","import React from 'react';\nimport Stone from './stone';\n\ntype BoardRowProps = {\n  squares: Array<string>;\n  onClick: (arg0: number) => void;\n  row: number;\n};\n\ntype BoardProps = {\n  squares: Array<string>;\n  onClick: (arg0: number) => void;\n};\n\nconst BoardRow = (props: BoardRowProps) => {\n  return (\n    <div className=\"board-row\">\n      {[0, 1, 2, 3, 4, 5, 6].map((col) => (\n        <Stone\n          key={col}\n          value={props.squares[props.row * 7 + col]}\n          onClick={() => props.onClick(col)}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst Board = (props: BoardProps): JSX.Element => {\n  return (\n    <div>\n      {[0, 1, 2, 3, 4, 5].map((id) => (\n        <BoardRow key={id} row={id} squares={props.squares} onClick={(i) => props.onClick(i)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './mobile.css';\n\nimport Title from './components/title';\nimport Indicator from './components/indicator';\nimport Volume from './components/volume';\nimport Board from './components/board';\nimport { useStepNumber } from './components/useStepNumber';\nimport { isPlaceable, calculateWinner, audioPlay, makeWinSquares } from './components/utils';\n\nconst Game = () => {\n  const [history, setHistory] = useState([Array(42).fill(null)]);\n  const [volume, setVolume] = useState(0.5);\n  const [isEnter, setIsEnter] = useState(false);\n  const [isDraw, setIsDraw] = useState(false);\n  const [stepNumber, xIsNext, incStepNumber, updateStepNumber] = useStepNumber();\n\n  const handleClick = (i: number) => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const squares = newHistory[newHistory.length - 1].slice();\n    const place = isPlaceable(squares, i);\n    if (!isEnter || isDraw || calculateWinner(squares, 0) || place === null) {\n      audioPlay('audio/disable.mp3', volume);\n      return;\n    }\n    squares[place] = xIsNext ? 'X' : 'O';\n    const winStreak = calculateWinner(squares, 0);\n    makeWinSquares(squares, winStreak);\n    if (winStreak) {\n      audioPlay('audio/win.mp3', volume);\n    } else {\n      audioPlay('audio/switch.mp3', volume);\n    }\n    newHistory.push(squares);\n    const newIsDraw = !winStreak && stepNumber === 41 ? true : false;\n    setIsDraw(newIsDraw);\n    setHistory(newHistory);\n    incStepNumber();\n  };\n\n  const resetGame = () => {\n    audioPlay('audio/switch.mp3', volume);\n    setIsDraw(false);\n    updateStepNumber(0);\n  };\n\n  const current = history[stepNumber];\n  const winStreak = calculateWinner(current, 0);\n  const winner = winStreak ? current[winStreak[0]] : null;\n\n  return (\n    <div className=\"game\">\n      <Title />\n      <div className=\"game-info\">\n        <Indicator xIsNext={xIsNext} isDraw={isDraw} winner={winner} />\n        <button className=\"reset-button\" onClick={resetGame}>\n          RESET\n        </button>\n        <Volume volume={volume} setVolume={setVolume} />\n        <button\n          className=\"enter-button\"\n          onClick={() => {\n            if (!isEnter) {\n              audioPlay('audio/bell_sound.mp3', volume);\n              setIsEnter(true);\n            }\n          }}>\n          入場 ☞\n        </button>\n      </div>\n      <div className=\"game-body\">\n        <div className={'game-board' + (isEnter ? ' board-on' : '')}>\n          <Board squares={current} onClick={handleClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ========================================\nReactDOM.render(<Game />, document.getElementById('root'));\n","import { useState } from 'react';\n\nexport function useStepNumber(): [number, boolean, () => void, (s: number) => void] {\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const incStepNumber = () => {\n    setStepNumber((stepNumber) => stepNumber + 1);\n    setXIsNext(!xIsNext);\n  };\n\n  const updateStepNumber = (step: number) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  return [stepNumber, xIsNext, incStepNumber, updateStepNumber];\n}\n\n// export function useGameState() {\n//   const [history, setHistory] = useState([\n//       Array(42).fill(null),\n//   ]);\n//   const [isDraw, setIsDraw] = useState(false);\n//   // winner\n//   const [winner, setWinner] = useState(null);\n//   // winnner streak\n//   const [winnerStreak, setWinnerStreak] = useState(null);\n\n//   const updateHistory(squares: Array<string>) => {\n//     const tmpHistory = history.slice(0, )\n//     setHistory()\n//   }\n\n// }\n"],"sourceRoot":""}